title: "Monita"
subtitle: "Visualizing the status of servers and applications"
thumbnail: "/assets/img/projects/monita/thumbnail.png"
banner: "/assets/img/projects/monita/header.png"
overview: |
    A dashboard application that visualizes the status of the various applications and servers my team is responsible for in a way that is simple to understand.
roles: "Sole developer and designer"
links:
tools:
    - "Flask: Python"
    - HTML5
    - SCSS
    - "Bootstrap 4: CSS, JavaScript"
    - jQuery
    - Ajax
    - "Jinja2: HTML Templating"
    - Amazon Web Services Elastic Beanstalk
    - Okta
    - Subversion
description: |
    The Common Platforms team at the Chick-fil-A Support Center focuses on maintaining and improving the systems and services that the other teams in the IT department rely on. A large part of their responsibilities includes keeping an eye on all of the servers and applications that they are in charge of and troubleshooting any errors that come up. As expected, this is a critical role that impacts the rest of the department, but it can be a time consuming task as well, taking away valuable time from other projects that the team would like to focus on.<br>
    <br>
    As an intern on their team for the summer, I was tasked with developing an internal web application—Monita—that consolidates the status information of the many servers and applications my team monitors in a way that is easy to understand at a glance. Further, the devices are connected and displayed in a graph to visualize the dependencies and make it simple to trace any errors back to the source. The server-side was developed using the Flask micro web framework, while client-side was handled using jQuery and AJAX. This application is hosted on Amazon Web Services's Elastic Beanstalk and utilizes Okta's two-factor authentication to prevent unauthorized access.
details:
    - title: "The Status Graph"
      subsections:
          - text: |
              On Monita's main screen, a graph of servers and applications can be seen. Each node on the graph depicts a single device, and its icon represents the device's status, with green representing no errors, yellow for small errors, orange for significant errors, and red for critical errors. These nodes connect with other nodes that the device directly interacts with; for example, an application would be connected to the database that it uses.<br>
              <br>
              The nodes also only represent these applications and servers at the highest level. They may actually be made up of multiple smaller servers or applications, and information for these lower-level devices can be found in more in-depth views. One of these methods is through the quick navigation menu on the left side, where each node is listed. These listings can be expanded to reveal the next level of the node's family tree. Selecting anything on the quick navigation menu performs an equivalent action to selecting a node on the graph.<br>
              <br>
              Finally, the list of devices being used can be changed through the options on the top-right, which currently includes options for devices from the production environment and the non-production environment. As the device lists are stored in a JSON file, additional lists can easily be added to provide a more customizable experience.
            images:
                - url: "/assets/img/projects/monita/main_screen.png"
                  caption: The device graph
                  setname: screens
    - title: "Viewing Individual Nodes"
      subsections:
          - text: |
              Once an individual node on the graph is selected, it brings up a modal window that displays individual information about that node. For one, it clearly displays the status of the node, both in an image and in words. This window also displays a table of the current active alerts, if any, that are afflicting the device being viewed. If a row is selected, it will take the user to the error alert's information page in the application Chick-fil-A uses to create these alerts in the first place. The data for this table is received using REST API calls to that application. This table can be sorted and filtered in a variety of ways so that the user is able to find whatever errors they are looking for.<br>
              <br>
              The user is also able to directly navigate the node's family tree in this window, where clicking on the node's name reveals a dropdown menu that displays both its direct parents and direct children, if any, and their current status. Clicking on any of these family members will repopulate the modal window with that device's information. This dropdown also provides a link to the device's page in the alerting application mentioned earlier if the device exists, as some new groupings were created to better match how the team organizes these servers and applications.
            images:
                - url: "/assets/img/projects/monita/main_screen2.png"
                  caption: Information for a single node
                  setname: screens
                - url: "/assets/img/projects/monita/main_screen3.png"
                  caption: Navigating a node's family tree in the modal window
                  setname: screens
          - text: |
              Finally, by clicking the link labeled "Archive", the user is able to view a list of all alerts that have ever afflicted the node, including ones that are not currently active. These alerts are depicted in a table similar to the one on the node's information window, and all the same functionality is preserved. This mostly serves to let the user easily view errors they may have missed, as the error might have been resolved in the time before checking the application.
            images:
                - url: "/assets/img/projects/monita/main_screen5.png"
                  caption: A node's alert archive
                  setname: screens
